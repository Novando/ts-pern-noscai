version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: clinic_db
    environment:
      POSTGRES_USER: ${PG_USER:-postgres}
      POSTGRES_PASSWORD: ${PG_PASS:-postgres}
      POSTGRES_DB: ${PG_DB:-clinic}
    volumes:
      - clinic_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER:-postgres} -d ${PG_DB:-clinic}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - clinic-network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: clinic_backend
    depends_on:
      db:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV:-dev}
      - APP_PORT=${APP_PORT:-3000}
      - APP_NAME=${APP_NAME:-"clinic-backend"}
      - PG_USER=${PG_USER:-postgres}
      - PG_PASS=${PG_PASS:-postgres}
      - PG_HOST=${PG_HOST:-clinic_db}
      - PG_DB=${PG_DB:-clinic}
      - PG_QUERY_TIMEOUT=${PG_QUERY_TIMEOUT:-30000}
      - PG_LOCK_TIMEOUT=${PG_LOCK_TIMEOUT:-60000}
      - PG_CONN_TIMEOUT=${PG_CONN_TIMEOUT:-300000}
      - PG_IDLE_TX_TIMEOUT=${PG_IDLE_TX_TIMEOUT:-15000}
    ports:
      - "3000:3000"
    networks:
      - clinic-network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: clinic_frontend
    depends_on:
      - backend
    ports:
      - "3001:8080"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3000/v1
    networks:
      - clinic-network

# Volumes
volumes:
  clinic_data:

# Networks
networks:
  clinic-network:
    driver: bridge
